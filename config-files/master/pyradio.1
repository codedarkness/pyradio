.\" Copyright (C) 2011 Ben Dowling <http://www.coderholic.com/pyradio>
.\" This manual is freely distributable under the terms of the GPL.
.\"
.TH PYRADIO 1 "January 2020"

.SH NAME
.PP
pyradio \- a curses Internet radio player.

.SH SYNOPSIS
.PP
\fBpyradio\fR\ [\fIOPTIONS\fR]

.SH DESCRIPTION
.PP
.B pyradio
is a command line Internet radio player based on curses, that uses external media players to perform the actual playback.
.PP
It currently supports the following players: \fIMPV\fR, \fIMPlayer\fR and \fIVLC\fR.

.SH OPTIONS

.IP \fB-s\fR,\fB\ \--stations\ \fR[\fISTATIONS\fR]
Use specified station CSV file.
.IP \fB-p\fR,\fB\ \--play\ \fR\<\fIPLAY\fR\>
Play station number \fR\<\fIPLAY\fR\>. Select randome station if \fR\<\fIPLAY\fR\> not specified.
.IP \fB-u\fR,\fB\ \--use-player\ \fR[\fIUSE_PLAYER\fR]
Specify which player to use (\fImpv\fR,\ \fImplayer\fR\ or\ \fIvlc\fR). A comma-separated list of players can be givven, thus specifying detection order.
.IP \fB-a\fR,\fB\ \--add
Add station to list.
.IP \fB-ls\fR,\fB\ \--list-playlists
List of available playlists in config dir.
.IP \fB-l\fR,\fB\ \--list
List of available stations in a playlist.
.IP \fB-scd\fR,\fB--show-config-dir\fR
Print config directory location and exit.
.IP \fB-t\fR\ \fITHEME\fR,\ \fB--theme\fR\ \fITHEME\fR
Use specified \fITHEME\fR.
.IP \fB-ocd\fR,\fB--open-config-dir\fR
Open config directory with default file manager.
.IP \fB--unlock
Remove sessions' lock file.
.IP \fB-d\fR,\fB\ \--debug
Enable \fBDEBUG MODE\fR.
.IP \fB-h\fR,\fB\ \--help
Show usage information and exit.

.RE
.PP
The following options can also be set in \fBpyradio\fR’s configuration file:

.IP \fB-s\fR
parameter \fIdefault_playlist\fR (default value: \fBstations\fR)
.IP \fB-p\fR
parameter \fIdefault_station\fR (default value: \fB-1\fR)
.IP \fB-u\fR
parameter \fIplayer\fR (default value: \fBmpv, mplayer, vlc\fR)

.SH CONTROLS

.IP \fBUp\fR/\fBDown\fR/\fBPgUp\fR/\fBPgDown
Change station selection
.IP \fBj\fR/\fBk
Change station selection (vi-like)
.IP \fBEnter\fR/\fBRight\fR/\fBl
Play selected station
.IP \fBr
Select and play a random station
.IP \fBSpace\fR/\fBLeft\fR/\fBh
Stop/start playing selected station
.IP \fBP\fR
Jump to playing station
.IP \fBH\ M\ L
Jump to top / middle / bottom of screen
.IP \fBg
Jump to the start of the playlist
.IP \fI<n>\fBG
Jump to the end of the playlist
.br
If \fI<n>\fR (line number) was entered, jump to it
.IP \fB-\fR/\fB+\fR\ or\ \fB,\fR/\fB.
Change volume
.IP \fBm
Mute
.IP \fBv
Save volume (\fIMPV\fR and \fIMPlayer\fR only)
.IP \fBo\ s\ R
\fBO\fIpen\fR / \fBS\fIave\fR / \fBR\fIeload\fR playlist
.IP \fBa\ A\fR
Add / append a new station
.IP \fBe\fR
Edit current station
.IP \fBE\fR
Change current station's encoding
.IP \fBDEL\fR,\fBx
Delete selected station
.IP \fBJ
Create a \fIJump tag
.IP \fI<n>\fB^U\fR,\fI<n>\fB^D
Move current station up / down
.br
If \fI<n>\fR (line number) was entered, or a \fIJump tag\fR has been defined, move the station there
.IP \fBt
Open the \fITheme Selection\fR window
.IP \fBT
Toggle background transparency
.IP \fBc
Open the \fIConfiguration window
.IP \fB?
Show keys help
.IP \fBEsc\fR/\fBq
Quit

.P
The same logic applies to all \fBpyradio\fR windows.

.IP \fBNote:
All windows - except the \fISearch window\fR - support changing the volume and muting / unmuting the player (provided that \fBpyradio\fR is actually connected to a station).

.SH CONFIG FILE
\fBpyradio\fR upon its execution tries to read its configuration file (i.e. \fI~/.config/pyradio/config\fR). If this file is not found, it will be created. If an error occurs while parsing it, an error message will be displayed and \fBpyradio\fR will terminate.

The file contains parameters such as the player to use, the playlist to load etc. It is heavily commented, so that manual editing is really easy. The best practice to manually edit this file is executing \fBpyradio\fR with the \fB-ocd\fR command line option, which will open the configuration directory in your file manager, and then edit it using your preferable text editor.

The file can also be altered while \fBpyradio\fR is running, by pressing "\fIc\fR", which will open the "\fIConfiguration window\fR". This window presents all \fBpyradio\fR options and provide the way to change them and finally save them by pressing "\fIs\fR".

In any case, \fBpyradio\fR will save the file before exiting (or in case Ctrl-C is pressed) if needed (e.g. if a config parameter has been changed during its execution).

If saving the configuration file fails, \fBpyradio\fR will create a back up file and terminate. When restarted, \fBpyradio\fR will try to restore previously used settings from the said back up file.

.SH ABOUT PLAYLIST FILES
.PP
\fBpyradio\fR reads the stations to use from a CSV file, where each line contains two columns, the first being the station name and the second being the stream URL.
.PP
Optionally, a third column can be inserted, stating the encoding used by the station (more on this at \fBSPECIFYING STATIONS' ENCODING\fR).
.PP
\fBpyradio\fR will by default load the user's stations file (e.g. \fI~/.config/pyradio/stations.csv\fR). If this file is not found, it will be created and populated with a default set of stations.

.IP \fBTip:
If you already have a custom \fIstations.csv\fR file, but want to update it with \fBpyradio\fR's default one, you just rename it, run \fBpyradio\fR (so that the default one get created) and then merge the two files.

.IP \fBNote:
Older versions used to use \fI~/.pyradio\fR as default stations file. If this file is found, it will be copied to use's config directory (e.g. \fI~/.config/pyradio\fR) and renamed to \fIstations.csv\fR or if this file exists, to \fIpyradio.csv\fR. In this case, this file will be the default one.

.PP
.B
Specifying a playlist to load (command line)

.PP
\fBpyradio\fR will normally load its default playlist file, as described above, upon its execution. A different file can be loaded when the \fI-s\fR command line option is used.

.PP
The \fI-s\fR option will accept:

.HP

\fI*\fR a relative or absolute file name.

\fI*\fR the name of a playlist file which is already in its configuration directory.

\fI*\fR the number of a playlist file, as provided by the \fI-ls\fR command line option.

.PP
\fBExamples:\fR

.HP
To load a playlist called "\fIblues.csv\fR", one would use the command:

.RS 5
\fBpyradio -s /path/to/\fIblues.csv\fR

.RE
If this file was saved inside \fBpyradio\fR's configuration directory, one could use the following command:

.RS 5
\fBpyradio -s \fIblues\fR

.RE
To use the playlist number, one would execute the commands:

.RS 5

\fBpyradio -ls\fI

Playlists found in "/home/user/.config/pyradio"
  1. hip-hop
  2. party
  3. stations
  4. huge
  \fB5. blues\fI
  6. rock
  7. pop

\fBpyradio -s \fI5\fR


.IP \fBNote\fR
The default playlist to load can also be set in \fBpyradio\fR’s configuration file, parameter \fIdefault_playlist\fR (default value is \fIstations\fR).

.RE
.PP
.B
MANAGING PLAYLISTS (WITHIN PYRADIO)

Once \fBpyradio\fR has been loaded, one can perform a series of actions on the current playlist and set of playlists saved in its configuration directory.

Currently, the following actions are available:

Pressing "\fIa\fR" or "\fIA\fR" will enable you to add a new station (either below the currently selected station or at the end of the list), while "\fIe\fR" will edit the currently selected station. All of these actions will open the "\fIStation Editor\fR".

If you just want to change the encoding of the selected station, just press "\fIE\fR". If the station is currently playing, playback will be restarted so that the encoding's change takes effect (hopefully correctly displaying the station/song title).

Then, when this is done, you can either save the modified playlist, by pressing "\fIs\fR", or reload the playlist from disk, by pressing "\fIR\fR". A modified playlist will \fIautomatically\fR be saved when \fBpyradio\fR exits (or Ctrl-C is pressed).

One thing you may also want to do is remove a station from a playlist, e.g. when found that it not longer works. You can do that by pressing "\fIDEL\fR" or "\fIx\fR".

Finally, opening another playlist is also possible. Just press "\fIo\fR" and you will be presented with a list of saved playists to choose from. These playlists must be saved beforehand in \fBpyradio\fR's configuration directory.

While executing any of the previous actions, you may get confirmation messages (when opening a playlist while the current one is modified but not saved, for example) or error messages (when an action fails). Just follow the on screen information, keeping in mind that a capital letter as an answer will save this answer in \fBpyradio\fR's configuration file for future reference.

.PP
.B
MANAGING “FOREIGN” PLAYLISTS

A playlist that does not reside within the program’s configuration directory is considered a "\fIforeign\fR" playlist. This playlist can only be opened by the \fB-s\fR command line option.

When this happens, \fBpyradio\fR will offer you the choise to copy the playlist in its configuration directory, thus making it available for manipulation within the program.

If a playlist of the same name already exists in the configuration directory, the "\fIforeign\fR" playlist will be time-stamped. For example, if a "\fIforeign\fR" playlist is named "\fIstations.csv\fR", it will be named "\fI2019-01-11_13-35-47_stations.csv\fR" (provided that the action was taked on January 11, 2019 at 13:35:47).


.PP
.B
PLAYLIST HISTORY

\fBpyradio\fR will keep a history of all the playlists opened (within a given session), so that navigating between them is made easy.

In order to go back to the previous playlist, the user just has to press "\fI\\\\\fR" (double backslash). To get to the first playlist "\fI\\]\fR" (backslash - closing square bracket) can be used.

Going forward in history is not supported.

.SH SEARCH FUNCTION

On any window presenting a list of items (stations, playlists, themes) a \fBsearch function\fR is available by pressing "\fI/\fR".

The \fISearch Window\fR supports normal and extend editing and in session history.

One can always get help by pressing the "\fI?\fR" key.

After a search term has been successfully found (search is case insensitive), next occurrence can be obtained using the "\fIn\fR" key and previous occurrence can be obtained using the "\fIN\fR" key.

.SH LINE EDITOR

\fBpyradio\fR "\fISearch function\fR" and "\fIStation edior\fR" use a \fIline editor\fR to permit typing and editing stations' data. 

The \fIline editor\fR works both on \fBPython 2\fR and \fBPython 3\fR, but does not provide the same functionality for both versions:

.RS 5
.IP \fI*\fR 2
In \fBPython 2\fR, only ASCII characters can be inserted.
.IP \fI*\fR 2
In \fBPython 3\fR, no such restriction exists.  Furthermore, using CJK characters is also supported.

.RE

.PP
One can always display help by pressing "\fI?\fR", but that pauses a drawback; one cannot actually have a "\fI?\fR" withing the string.

To do that, one would have to use the backslash key "\fI\\\fR" and then press "\fI?\fR".

To sum it all up:

.IP
1. Press "\fI?\fR" to get help.
.IP
2. Press "\fI\\?\fR" to get a "\fI?\fR".
.IP
3. Press "\fI\\\\\fR" to get a "\fI\\\fR".

.PP
\fBCJK CHARACTERS SUPPORT\fR

The \fIline editor\fR supports the insertion of \fICJK Unified Ideographs [1]\fR, as described on \fICJK Unified Ideographs (Unicode block) [2]\fR, also known as URO, abbreviation of Unified Repertoire and Ordering. These characters, although encoded as a single code-poin (character), actually take up a 2-character space, when rendered on the terminal.

A depiction of the editor's behavior can be seen at this image:

\fIhttps://members.hellug.gr/sng/pyradio/pyradio-editor.jpg\fR

[1] \fIhttps://en.wikipedia.org/wiki/CJK_Unified_Ideographs\fR

[2] \fIhttps://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)\fR


.SH MOVING STATIONS AROUND

Rearranging the order of the stations in the playlist is another feature PyRadio offers.

All you have to do is specify the \fIsource\fR station (the station to be moved) and the position it will be moved to (\fItarget\fR).

There are three way to do that:

.RS 5

.IP 1. 3
Press \fICtrl-U\fR or \fICtrl-D\fR to move the current station up or down.
.IP 2. 3
Type a station number and press \fICtrl-U\fR or \fICtrl-D\fR to move the current station there.
.IP 3. 3
Go to the position you want to move a station to, and press "\fIJ\fR". This will tag this position (making it the target of the move). Then go to the station you want to move and press \fICtrl-U\fR or \fICtrl-D\fR to move it there.


.SH SPECIFYING STATIONS' ENCODING

Normally, stations provide information about their status (including the title of the song playing, which \fBpyradio\fR displays) in Unicode (\fIutf-8\fR encoded). Therefore, \fBpyradio\fR will use \fIutf-8\fR to decode such data, by default.

In an ideal world that would be the case for all stations and everything would be ok and as far as \fBpyradio\fR is concerned, songs' titles would be correctly displayed. Unfortunately, this is not the case.

A lot of stations encode and transmit data in a different encoding (typically the encoding used at the region the come from). The result in \fBpyradio\fR would be that a song title would be incorrectly displayed, not displayed at all, or trying to displaying it might even break \fBpyradio\fR's layout.

.IP \fBNote\fR
\fIvlc\fR will not work in this case; it presumably tries to decode the said data beforehand, probably using \fIutf-8\fR by default, and when it fails, it provides a "\fI(null)\fR" string, instead of the actual data. So, you'd better not use \fIvlc\fR if such stations are in your playlists.

.PP
\fBpyradio\fR addresses this issue by allowing the user to declare the encoding to use either in a station by station mode or globally.

.PP
.B
STATION BY STATION ENCODING DECLARATION

As previously stated, a \fBpyradio\fR's playlist can optionally contain a third column (in addition to the station name and station URL columns), which declares the station's encoding.

So, when a \fInon-utf-8\fR encoded station is inserted in a playlist, its encoding can also be declared along with its other data. The drawback of this feature is that an encoding must be declared for \fBall stations\fR (so that the \fBCSV\fR file structure remains valid). To put it simple, since one station comprises the third column, all stations must do so as well.

This may seem intimidating (and difficult to achieve), but it's actually really simple; just add a "\fI,\fR" character at the end of the line of each station that uses the default encoding. In this way, all stations comprise the third column (either by declaring an actual encoding or leaving it empty).

Example:

Suppose we have a playlist with one \fIutf-8\fR encoded station:

.HP

\fIStation1\fB,\fIStation1_URL

.PP
Now we want to add "\fIStation2\fR" which is \fIiso-8859-7\fR (Greek) encoded.

Since we know \fBall stations\fR must comprise the third (encoding) column, we add it to the existing station:


.HP

\fIStation1\fB,\fIStation1_URL\fB,

.PP
This way we add an empty encoding, forcing
.PP
Finally, we insert the new station to the playlist:

.HP

\fIStation1\fB,\fIStation1_URL\fB,\fI
.br
Station2\fB,\fIStation2_URL\fB,\fIiso-8859-7

.IP \fBNote\fR
Using the \fB-a\fR command line option will save you all this trouble, as it will automatically take care of creating a valid \fBCSV\fR file. Alternatively, you can change the selected station's encoding by pressing "\fIE\fR" while in \fBpyradio\fR.


.PP
.B
GLOBAL ENCODING DECLARATION

\fBpyradio\fR's configuration file contains the parameter \fBdefault_encoding\fR, which by default is set to \fIutf-8\fR.

Setting this parameter to a different encoding, will permit \fBpyradio\fR to successfully decode such stations.

This would be useful in the case where most of your stations do not use \fIutf-8\fR. Instead of editing the playlist and add the encoding to each and every affected station, you just set it globally.

.PP
.B
FINDING THE RIGHT ENCODING

A valid encoding list can be found at:

\fIhttps://docs.python.org/2.7/library/codecs.html#standard-encodings

\fRreplacing \fI2.7\fR with specific version: \fI3.0\fR up to current python version.

.SH PLAYER DETECTION / SELECTION
.PP
\fBpyradio\fR is basically built around the existence of a valid media player it can use. Thus, it will auto detect the existence of its supported players upon its execution.
.PP
Currently, it supports \fIMPV\fR, \fIMPlayer\fR and \fIVLC\fR, and it will look for them in that order. If none of them is found, the program will terminate with an error.
.PP
Users can alter this default behavior by using the \fB-u\fR command line option. This option will permit the user either to specify the player to use, or change the detection order.
.PP
Example:

.IP \fBpyradio\ -u\ vlc
will instruct \fBpyradio\fR to use VLC; if it is not found, the program will terminate with an error.

.IP \fBpyradio\ -u\ vlc,mplayer,mpv
will instruct \fBpyradio\fR to look for VLC, then MPlayer and finaly for MPV and use whichever it finds first; if none is found, the program will terminate with an error.


.IP \fBNote\fR
The default player to use can also be set in \fBpyradio\fR’s configuration file, parameter \fIplayer\fR (default value is \fImpv, mplayer, vlc\fR).

.SH PLAYER DEFAULT VOLUME LEVEL
.PP
\fIMPV\fR and \fIMPlayer\fR, when started, use their saved (or default) volume level to play any multimedia content. Fortunately, this is not the case with \fIVLC\fR.
.PP
This introduces a problem to \fBpyradio\fR: every time a user plays a station (i.e restarts playback), even though he may have already set the volume to a desired level, the playback starts at the player's default level.
.PP
The way to come around it, is to save the desired volume level in a way that it will be used by the player whenever it is restarted.
.PP
This is done by typing "\fIv\fR" right after setting a desired volume level.
.PP
\fBMPV\fR
.PP
\fIMPV\fR uses profiles to customize its behavior.
.PP
\fBpyradio\fR defines a profile called "\fI[pyradio]\fR" in MPV's configuration file (e.g. \fI~/.config/mpv/mpv.conf\fR). This profile will be used every time playback is started.
.PP
Example:

.HP

\fIvolume=100

[pyradio]
.br
volume=50

.IP \fBNote\fR
If \fBMPV 0.30.0\fR is installed, there will be no visual notification when changing the volume. Furthermore, saving the volume value will \fInot be possible\fR. This is a \fBpyradio\fR bug and will be addressed in the future.

.PP
\fBMPlayer\fR
.PP
\fIMPlayer\fR uses profiles to customize its behavior as well.
.PP
\fBpyradio\fR defines a profile called "\fI[pyradio]\fR" in MPV's configuration file (e.g. \fI~/.mplayer/config\fR). This profile will be used every time playback is started.
.PP
Example:

.HP

\fIvolume=100

[pyradio]
.br
volstep=1
.br
volume=28

.SH PYRADIO THEMES
.PP

\fBpyradio\fR comes with 6 preconfigured (hard coded) themes:

.IP \fBdark\fR\ (8\ color\ theme)
This is the appearance \fBpyradio\fR has always had. Enabled by default.
.IP \fBlight\fR\ (8\ color\ theme)
A theme for light terminal background settings.
.IP \fBdark_16_colors\fR\ (16\ color\ theme)
\fIdark\fR theme alternative.
.IP \fBlight_16_colors\fR\ (16\ color\ theme)
\fIlight\fR theme alternative.
.IP \fBwhite_on_black\fR\ or\ \fBwob\fR\ (256\ color\ b&w\ theme)
A theme for dark terminal background settings.
.IP \fBblack_on_white\fR\ or\ \fBbow\fR\ (256\ color\ b&w\ theme)
A theme for light terminal background settings.

.PP
Furthermore, three 256-color system themes (these are actual files saved in the \fIthemes\fR installation directory) are also available: \fBbrown_by_sng\fR, \fBpink_by_sng\fR and \fBpurple_by_sng\fR.

.PP
The visual result of an applied theme greatly depends on the terminal settings (e.g. foreground and background color settings, palette used, number of colors supported, real or pseudo-transparency support, etc.)

Pressing "\fBt\fR" will bring up the \fITheme selection window\fR, which can be used to activate a theme and set the default one.

.IP \fBNote\fR
Themes that use more colors than those supported by the terminal in use, will not be present in the \fITheme selection window\fR. Furthermore, if a such a theme is set as default (or requested using the "\fB-t\fR" command line option), \fBpyradio\fR will silently fall-back to the "\fBdark\fR" theme. (or the "\fBlight\fR" theme, if the terminal supports 8 colors and default theme is set to "\fIlight_16_colors\fR").

.PP
The \fITheme selection window\fR will remain open after activating a theme, so that the user can inspect the visual result and easily change it, if desired. Then, when he is satisfied with the activated theme, the window will have to be manually closed (by pressing "\fBq\fR" or any other relevant key - pressing "\fB?\fR" will bring up its help).

The use of custom themes and theme editing is not implemented yet; theses are features for future releases.

\fBUSING TRANSPARENCY\fR

\fBpyradio\fR themes are able to be used with a transparent background.

Pressing "\fBT\fR"  will toggle the transparency setting (it is \fIoff\fR by default) and save this state in \fBpyradio\fR's configuration file.

Setting transparency on, will actually force \fBpyradio\fR to not use its own background color, effectively making it to display whatever is on the terminal (color/picture/transparency). The visual result depends on terminal settings and whether a compositor is running.

When the \fITheme selection window\fR is visible, a "\fI[T]\fR" string displayed at its bottom right corner will indicate that transparency is \fIon\fR.

.SH SESSION LOCKING

\fBpyradio\fR uses session locking, which actually means that only the first instance executed within a given session will be able to write to the configuration file.

Subsequent instances will be "\fIlocked\fR. This means that the user can still play stations, load and edit playlists, load and test themes, but any changes will \fBnot\fR be recorded in the configuration file.

\fBSeeeion unlocking\fR

If for any reason \fBpyradio\fR always starts in \fIlocked mode\fR, one can \fBunclock\fR the session, using the "\fB--unlock\fR" command line paremater.

.SH UPDATE NOTIFICATION
.PP
\fBpyradio\fR will periodically (once every 10 days) check whether a new version has been released.

If so, a notification message will be displayed, informing the user about it.

.SH CLEANING UP
.PP
As \fBpyradio\fR versions accumulate, when building from source, one may have to \fIclean up\fR old installation files.

To do that, one has to observe the installation process in order to find out where the package is installed. The installation would complete printing the following messages (on \fIpython 3.7\fR):

.HP

\fIInstalled \fB/usr/lib/python3.7/site-packages\fI/pyradio-\fB0.7.8\fI-py3.7.egg
.br
Processing dependencies for pyradio==\fB0.7.8\fI
.br
Finished processing dependencies for pyradio==\fB0.7.8\fR

.PP
From this we get that the installation directory is \fB/usr/lib/python3.7/site-packages\fR. This may be different though, depending on the distribution and python version used.

Let's see what \fBpyradio\fR files exist there:

.HP

\fI$ \fBls -d /usr/lib/python3.7/site-packages/pyradio*

\fI/usr/lib/python3.7/site-packages/pyradio-\fB0.7.6.2\fI-py3.7.egg
.br
/usr/lib/python3.7/site-packages/pyradio-\fB0.7.7\fI-py3.7.egg
.br
/usr/lib/python3.7/site-packages/pyradio-\fB0.7.8\fI-py3.7.egg

.PP
As we see, previous versions still exist in this system: \fB0.7.6.2\fR and \fB0.7.7\fR. These files (actually directories) can safely be removed:

.HP

\fI$ \fBsudo rm -rf /usr/lib/python3.7/site-packages/pyradio-\fI0.7.6.2\fB-py3.7.egg
.br
\fI$ \fBsudo rm -rf /usr/lib/python3.7/site-packages/pyradio-\fI0.7.7\fB-py3.7.egg

.SH DEBUG MODE
.PP
Adding the \fB-d\fR option to the command line will instruct \fBpyradio\fR to enter \fBDebug mode\fR, which means that it will print debug messages to a file. This file will always reside in the user's home directory and will be named \fIpyradio.log\fR.
.PP
In case of a bug or a glitch, please include this file to the issue you will open in github  at \<\fIhttps://github.com/coderholic/pyradio/issues\fR\>

.SH REPORTING BUGS
.PP
When a bug is found, please do report it by opening an issue at github at \<\fIhttps://github.com/coderholic/pyradio/issues\fR\>, as already stated above.

In you report you should, at the very least, state your \fIpyradio version\fR, \fIpython version\fR and \fImethod of installation\fR (built from source, AUR, snap, whatever).

It would be really useful to include \fB~/pyradio.log\fR in your report.

To create it, enter the following commands in a terminal:

.HP

\fI$\fR \fBrm ~/pyradio.log\fR
.br
\fI$\fR \fBpyradio -d\fR

.PP
Then try to reproduce the bug and exit pyradio.

Finally, include the file produced in your report.

.SH ACKNOWLEGEMENT

.PP
\fBpyradio\fR uses code frorm the following projects:

.RS 5

.IP 1. 3
\fBCJKwrap\fR (\fIhttps://gitlab.com/fgallaire/cjkwrap\fR) by Florent Gallaire - A library for wrapping and filling UTF-8 CJK text.

.SH FILES
.PP
.I /usr/share/doc/pyradio/README.md

.I /usr/share/doc/pyradio/README.html

.I /usr/share/doc/pyradio/build.md

.I /usr/share/doc/pyradio/build.html

.I /usr/share/licenses/pyradio/LICENSE

.IP \fBNote:
On \fBMac OS\fR, these file may be installed in \fI/usr/local/share/doc/pyradio\fR, depending on whether or not \fBSIP\fR is enabled.


.SH AUTHORS
.PP
\fBBen Dowling\fR\ \<\fIhttps://github.com/coderholic\fR\>,\ (Origianl\ author)
.PP
\fBKirill Klenov\fR\ \<\fIhttps://github.com/klen\fR\>,\ (2012)
.PP
\fBLaurent Stacul\fR\ \<\fIhttps://github.com/stac47\fR\>,\ (2013)
.PP
\fBPeter Stevenson (2E0PGS)\fR\ \<\fIhttps://github.com/2E0PGS\fR\>,\ (2018)
.PP
\fBSpiros Georgaras\fR\ \<\fIhttps://github.com/s-n-g\fR\>,\ (2018-2019)

